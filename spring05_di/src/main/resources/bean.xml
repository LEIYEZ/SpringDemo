<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd">

<!--    <bean id="accountService" class="cn.imut.factory.StaticFactory" factory-method="getAccountService"/>-->
    <!-- spring中的依赖注入
        依赖注入：
            Dependency Injection
        IOC的作用：
            降低程序间的依赖关系
        依赖关系的管理：
            交给spring管理
        在当前类需要用到其他类的对象，由spring为我们提供，我们只需要在配置文件中说明
        依赖关系的维护：
            称之为依赖注入。
        依赖注入：
            能注入的数据：有三类
                基本类型和String
                其他bean类型(在配置文件中或者注解配置过的bean)
                复杂类型/集合类型
            注入的方式：
                1.使用构造函数提供
                2.使用set方法提供
                3.使用注解提供
    -->

    <!-- 构造函数注入：
            使用的标签：constructor-arg
            标签出现的位置：bean标签的内部
            标签的属性：
                type：用于指定要注入的数据的数据类型，该数据类型也是构造函数中某个或某些参数的类型
                index：用于指定要注入的数据给构造函数中指定索引位置的参数赋值。索引的位置是从0开始
                name：用于指定给构造函数中指定名称的参数赋值
                ==============以上三个用于指定给构造函数中哪个参数赋值==========================================
                value：用于提供基本类型和String类型的数据
                ref：用于指定其他的bean类型数据。它指的是spring的ioc核心容器过的bean对象
             优势：在获取bean对象时注入数据是必须的操作，否则对象无法创建成功。
             弊端：改变了bean对象的实例化方法，是我们在创建对象时，如果用不到这些数据，也必须提供。
    -->
    <bean id="accountService" class="cn.imut.service.impl.AccountServiceImpl">
        <constructor-arg name="name" value="test"/>
        <constructor-arg name="age" value="18"/>
        <constructor-arg name="birthday" ref="now"/>
    </bean>

    <!-- 配置一个日期信息-->
    <bean id="now" class="java.util.Date"/>

    <!-- set方法注入                            更常用
            涉及的标签：property
            出现的位置：bean标签的内部
            标签的属性：
                name：用于指定注入时set方法的名称
                value：用于提供基本类型和String类型的数据
                ref：用于指定其他的bean类型数据。它指的是spring的ioc核心容器过的bean对象
            优势：创建对象没有明确的限制，可以直接使用默认构造函数
            弊端：如果某个成员必须有值，则获取对象是有可能set方法没有执行。
    -->
    <bean id="accountService1" class="cn.imut.service.impl.AccountServiceImpl1">
        <property name="name" value="test"/>
        <property name="age" value="18"/>
        <property name="birthday" ref="now"/>
    </bean>

    <!-- 集合类型的注入
            用于给List结构集合注入的标签：
                list array set
            用于Map结构集合注入的标签：
                map props
            结构相同，标签可以互换
    -->
    <bean id="accountService2" class="cn.imut.service.impl.AccountServiceImpl2">
        <property name="myStrs">
            <array>
                <value>AA</value>
                <value>BB</value>
                <value>CC</value>
            </array>
        </property>
        <property name="myList">
            <list>
                <value>AA</value>
                <value>BB</value>
                <value>CC</value>
            </list>
        </property>
        <property name="mySet">
            <set>
                <value>AA</value>
                <value>BB</value>
                <value>CC</value>
            </set>
        </property>
        <property name="myMap">
            <map>
                <entry key="AA" value="11"/>
                <entry key="BB" value="22"/>
                <entry key="CC" value="33"/>
            </map>
        </property>
        <property name="myProps">
            <props>
                <prop key="123">aaa</prop>
                <prop key="124">aaa</prop>
            </props>
        </property>
    </bean>
</beans>